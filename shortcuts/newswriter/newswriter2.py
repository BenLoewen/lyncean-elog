# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'newswriter2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QAction, QMainWindow, QMessageBox, QWidget
from PyQt5 import QtCore, QtGui, QtWidgets

from lib.cookies import getCookie,setCookie
from lib.database import Database

import sys

logs = ["operations","electronics"]

tags = {"electronics":["None", "MUX","MtrCntrl","Sync","InjLsFdbk","PwrMtr","LLRF","RFPPA","VacRad","SbandAmp","UniPolar","BiPolar","BPM","TSDG", "Magnets", "Mod",],"operations":["None", "Gun Test","Load Test","Structure Test","Module Test"]}

#db_path = "C:\\Users\\benja\\Desktop\\work\\elog1.0\\flask-server\\data\\elog"
db_path = "/home/bloewen/elog/lyncean-elog/flask-server/data/elog"

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 750)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.imgPreview = QtWidgets.QLabel(self.centralwidget)
        self.imgPreview.setGeometry(QtCore.QRect(70, 20, 631, 341))
        self.imgPreview.setText("")
        self.imgPreview.setObjectName("imgPreview")
        self.enterComment = QtWidgets.QTextEdit(self.centralwidget)
        self.enterComment.setGeometry(QtCore.QRect(130, 440, 621, 87))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.enterComment.setFont(font)
        self.enterComment.setObjectName("enterComment")
        self.commentLabel = QtWidgets.QLabel(self.centralwidget)
        self.commentLabel.setGeometry(QtCore.QRect(20, 440, 91, 71))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.commentLabel.setFont(font)
        self.commentLabel.setTextFormat(QtCore.Qt.AutoText)
        self.commentLabel.setScaledContents(False)
        self.commentLabel.setObjectName("commentLabel")
        self.selectLog = QtWidgets.QComboBox(self.centralwidget)
        self.selectLog.setGeometry(QtCore.QRect(130, 380, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.selectLog.setFont(font)
        self.selectLog.setObjectName("selectLog")
        self.selectLog.addItem("")
        self.selectLog.addItem("")
        self.logLabel = QtWidgets.QLabel(self.centralwidget)
        self.logLabel.setGeometry(QtCore.QRect(40, 360, 91, 71))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.logLabel.setFont(font)
        self.logLabel.setTextFormat(QtCore.Qt.AutoText)
        self.logLabel.setScaledContents(False)
        self.logLabel.setObjectName("logLabel")
        self.submitButton = QtWidgets.QPushButton(self.centralwidget)
        self.submitButton.setGeometry(QtCore.QRect(270, 670, 211, 71))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.submitButton.setFont(font)
        self.submitButton.setObjectName("submitButton")
        self.tagLabel = QtWidgets.QLabel(self.centralwidget)
        self.tagLabel.setGeometry(QtCore.QRect(350, 360, 91, 71))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.tagLabel.setFont(font)
        self.tagLabel.setTextFormat(QtCore.Qt.AutoText)
        self.tagLabel.setScaledContents(False)
        self.tagLabel.setObjectName("tagLabel")
        self.selectTag = QtWidgets.QComboBox(self.centralwidget)
        self.selectTag.setGeometry(QtCore.QRect(420, 380, 151, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.selectTag.setFont(font)
        self.selectTag.setObjectName("selectTag")
        self.operatorLabel = QtWidgets.QLabel(self.centralwidget)
        self.operatorLabel.setGeometry(QtCore.QRect(10, 530, 171, 71))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.operatorLabel.setFont(font)
        self.operatorLabel.setTextFormat(QtCore.Qt.AutoText)
        self.operatorLabel.setScaledContents(False)
        self.operatorLabel.setObjectName("operatorLabel")
        self.enterOperator = QtWidgets.QLineEdit(self.centralwidget)
        self.enterOperator.setGeometry(QtCore.QRect(190, 550, 561, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.enterOperator.setFont(font)
        self.enterOperator.setObjectName("enterOperator")
        self.configLabel = QtWidgets.QLabel(self.centralwidget)
        self.configLabel.setGeometry(QtCore.QRect(10, 590, 171, 71))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.configLabel.setFont(font)
        self.configLabel.setTextFormat(QtCore.Qt.AutoText)
        self.configLabel.setScaledContents(False)
        self.configLabel.setObjectName("configLabel")
        self.enterConfig = QtWidgets.QLineEdit(self.centralwidget)
        self.enterConfig.setGeometry(QtCore.QRect(190, 610, 561, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.enterConfig.setFont(font)
        self.enterConfig.setObjectName("enterConfig")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.selectLog.currentTextChanged.connect(self.onLogSelect)

        self.submitButton.clicked.connect(lambda:self.addEntry())


        #finish = QAction("Quit", self)
        #finish.triggered.connect(self.closeEvent)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.enterComment.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.commentLabel.setText(_translate("MainWindow", "Comment:"))
        self.logLabel.setText(_translate("MainWindow", "Log:"))
        self.submitButton.setText(_translate("MainWindow", "Submit to Log"))
        self.tagLabel.setText(_translate("MainWindow", "Tag:"))
        self.operatorLabel.setText(_translate("MainWindow", "Operator Name(s):"))
        self.configLabel.setText(_translate("MainWindow", "Configuration Name: "))

    def setLog(self):
        _translate = QtCore.QCoreApplication.translate
        log = getCookie("log")
        if log=="":
            log = "operations"
        selectLogs = []
        selectLogs.append(log[:1].upper() + log[1:])
        for logOpt in logs:
            if logOpt != log:
                selectLogs.append(logOpt[:1].upper() + logOpt[1:])
        i = 0
        for log_opt in selectLogs:
            self.selectLog.setItemText(i, _translate("MainWindow", log_opt))
            i += 1

    def onLogSelect(self,value):
        self.log = value.lower()
        self.setTags(self.log)
        self.checkHeaderExists(self.log)

    def setTags(self,log):
        _translate = QtCore.QCoreApplication.translate
        self.selectTag.clear()
        opts = tags[log]
        i = 0
        for j in range(len(opts)):
            self.selectTag.addItem("")
        for opt in opts:
            self.selectTag.setItemText(i, _translate("MainWindow", opt))
            i += 1

    def setupDatabase(self,path):
        self.db = Database(path)

    def closeEvent(self,event):
        self.db.closeDatabase()

    def setImage(self, imgPath):
        self.imgPath = imgPath
        self.imgPreview.setPixmap(QtGui.QPixmap(imgPath))
        self.imgPreview.setScaledContents(1)

    def checkHeaderExists(self,log):
        self.headerExists = self.db.logHeaderExists(log)
        if self.headerExists:
            MainWindow.resize(800, 650)
            self.submitButton.setGeometry(QtCore.QRect(270, 560, 211, 71))
            self.operatorLabel.hide()
            self.enterOperator.hide()
            self.enterConfig.hide()
            self.configLabel.hide()
        else:
            MainWindow.resize(800, 750)
            self.submitButton.setGeometry(QtCore.QRect(270, 670, 211, 71))
            self.operatorLabel.show()
            self.enterOperator.show()
            self.enterConfig.show()
            self.configLabel.show()

    def addEntry(self):
        error = False
        if not self.headerExists:
            operator = self.enterOperator.text()
            config_name = self.enterConfig.text()
            if operator=="":
                error = True
                msg = QMessageBox()
                msg.setWindowTitle("Error")
                msg.setText("Please enter operator name(s)")
                msg.exec_()
            elif self.enterComment.toPlainText() != "":
                self.db.addTestConfiguration(self.log,operator,config_name)
        if not error and self.enterComment.toPlainText() != "":
            self.db.addLogPost(self.log, "operator", self.enterComment.toPlainText(), self.imgPath, self.selectTag.currentText())
        elif self.enterComment.toPlainText() == "":
            msg = QMessageBox()
            msg.setWindowTitle("Error")
            msg.setText("Please enter comment")
            msg.exec_()
            error = True
        if not error:
            self.db.closeDatabase()
            sys.exit()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    ui.setupDatabase(db_path)

    ui.setLog()
    imgPath = sys.argv[1]
    ui.setImage(imgPath)

    MainWindow.show()
    sys.exit(app.exec_())